@page "/screenshots"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Screenshots - EmpAnalysis</PageTitle>

<div class="screenshots-container">
    <!-- Header Section -->
    <div class="page-header mb-4">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1 class="page-title">
                    <i class="fas fa-camera me-2"></i>
                    Screenshot Gallery
                </h1>
                <p class="text-muted">Monitor employee activity through automated screenshots</p>
            </div>
            <div class="col-md-6 text-end">
                <div class="d-flex align-items-center justify-content-end">
                    <div class="me-3">
                        <small class="text-muted">Auto-refresh</small>
                        <div class="form-check form-switch d-inline-block ms-2">
                            <input class="form-check-input" type="checkbox" @bind="autoRefresh" @bind:after="ToggleAutoRefresh">
                        </div>
                    </div>
                    <button class="btn btn-primary" @onclick="RefreshScreenshots">
                        <i class="fas fa-sync-alt me-2"></i>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Controls -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body">
            <div class="row align-items-center">
                <div class="col-md-3">
                    <div class="search-box">
                        <i class="fas fa-search"></i>
                        <input type="text" class="form-control ps-5" placeholder="Search by employee..." @bind="searchTerm" @oninput="OnSearchChanged" />
                    </div>
                </div>
                <div class="col-md-2">
                    <select class="form-select" @bind="selectedEmployee" @bind:after="OnFilterChanged">
                        <option value="">All Employees</option>
                        @foreach (var emp in employees.Select(e => e.Name).Distinct().OrderBy(n => n))
                        {
                            <option value="@emp">@emp</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <select class="form-select" @bind="selectedTimeFilter" @bind:after="OnFilterChanged">
                        <option value="today">Today</option>
                        <option value="yesterday">Yesterday</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                        <option value="all">All Time</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select class="form-select" @bind="viewMode" @bind:after="OnViewModeChanged">
                        <option value="gallery">Gallery View</option>
                        <option value="list">List View</option>
                        <option value="timeline">Timeline View</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <div class="d-flex align-items-center justify-content-end">
                        <span class="me-2 text-muted">Total:</span>
                        <span class="badge bg-primary me-3">@filteredScreenshots.Count</span>
                        <div class="btn-group btn-group-sm" role="group">
                            <button class="btn @(selectedSize == "small" ? "btn-primary" : "btn-outline-primary")" @onclick='() => ChangeSize("small")'>
                                <i class="fas fa-th"></i>
                            </button>
                            <button class="btn @(selectedSize == "medium" ? "btn-primary" : "btn-outline-primary")" @onclick='() => ChangeSize("medium")'>
                                <i class="fas fa-th-large"></i>
                            </button>
                            <button class="btn @(selectedSize == "large" ? "btn-primary" : "btn-outline-primary")" @onclick='() => ChangeSize("large")'>
                                <i class="fas fa-expand"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Screenshots Gallery -->
    @if (viewMode == "gallery")
    {
        <div class="screenshots-gallery">
            @if (filteredScreenshots.Any())
            {
                <div class="row">
                    @foreach (var screenshot in filteredScreenshots.Take(currentPage * pageSize))
                    {
                        <div class="@GetColumnClass() mb-4">
                            <div class="screenshot-card card border-0 shadow-sm h-100" @onclick="() => ShowScreenshotModal(screenshot)">
                                <div class="screenshot-image-container">
                                    <img src="@screenshot.ThumbnailPath" alt="Screenshot" class="card-img-top screenshot-image">
                                    <div class="screenshot-overlay">
                                        <div class="overlay-content">
                                            <button class="btn btn-light btn-sm">
                                                <i class="fas fa-expand-alt me-1"></i>View
                                            </button>
                                        </div>
                                    </div>
                                    <div class="screenshot-timestamp">
                                        @screenshot.Timestamp.ToString("HH:mm")
                                    </div>
                                </div>
                                <div class="card-body p-3">
                                    <div class="d-flex align-items-center">
                                        <img src="https://via.placeholder.com/30x30/@(GetEmployeeColor(screenshot.EmployeeName))/ffffff?text=@(screenshot.EmployeeName.Substring(0,1))" 
                                             alt="@screenshot.EmployeeName" class="rounded-circle me-2" width="30" height="30">
                                        <div class="flex-grow-1">
                                            <h6 class="card-title mb-0 text-truncate">@screenshot.EmployeeName</h6>
                                            <small class="text-muted">@screenshot.Timestamp.ToString("MMM dd, yyyy")</small>
                                        </div>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="#" @onclick="() => DownloadScreenshot(screenshot)"><i class="fas fa-download me-2"></i>Download</a></li>
                                                <li><a class="dropdown-item" href="#" @onclick="() => DeleteScreenshot(screenshot)"><i class="fas fa-trash me-2"></i>Delete</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(screenshot.ApplicationName))
                                    {
                                        <div class="mt-2">
                                            <small class="text-muted">
                                                <i class="fas fa-window-maximize me-1"></i>@screenshot.ApplicationName
                                            </small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                @if (filteredScreenshots.Count > currentPage * pageSize)
                {
                    <div class="text-center mt-4">
                        <button class="btn btn-outline-primary" @onclick="LoadMore">
                            Load More Screenshots
                        </button>
                    </div>
                }
            }
            else
            {
                <div class="empty-state text-center py-5">
                    <i class="fas fa-camera fa-4x text-muted mb-3"></i>
                    <h3 class="text-muted">No screenshots found</h3>
                    <p class="text-muted">@(string.IsNullOrEmpty(searchTerm) ? "Screenshots will appear here once monitoring agents are deployed" : "Try adjusting your search criteria")</p>
                </div>
            }
        </div>
    }

    <!-- List View -->
    @if (viewMode == "list")
    {
        <div class="screenshots-list">
            @if (filteredScreenshots.Any())
            {
                <div class="card border-0 shadow-sm">
                    <div class="card-body p-0">
                        @foreach (var screenshot in filteredScreenshots.Take(currentPage * pageSize))
                        {
                            <div class="list-item d-flex align-items-center p-3 border-bottom" @onclick="() => ShowScreenshotModal(screenshot)">
                                <img src="@screenshot.ThumbnailPath" alt="Screenshot" class="screenshot-thumbnail me-3" width="80" height="60">
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center">
                                        <img src="https://via.placeholder.com/24x24/@(GetEmployeeColor(screenshot.EmployeeName))/ffffff?text=@(screenshot.EmployeeName.Substring(0,1))" 
                                             alt="@screenshot.EmployeeName" class="rounded-circle me-2" width="24" height="24">
                                        <h6 class="mb-0">@screenshot.EmployeeName</h6>
                                    </div>
                                    <div class="mt-1">
                                        <small class="text-muted me-3">
                                            <i class="fas fa-calendar me-1"></i>@screenshot.Timestamp.ToString("MMM dd, yyyy HH:mm")
                                        </small>
                                        @if (!string.IsNullOrEmpty(screenshot.ApplicationName))
                                        {
                                            <small class="text-muted">
                                                <i class="fas fa-window-maximize me-1"></i>@screenshot.ApplicationName
                                            </small>
                                        }
                                    </div>
                                </div>
                                <div class="d-flex align-items-center">
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick:stopPropagation="true" @onclick="() => ShowScreenshotModal(screenshot)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick:stopPropagation="true" @onclick="() => DownloadScreenshot(screenshot)">
                                        <i class="fas fa-download"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="empty-state text-center py-5">
                    <i class="fas fa-list fa-4x text-muted mb-3"></i>
                    <h3 class="text-muted">No screenshots found</h3>
                    <p class="text-muted">Try adjusting your filters</p>
                </div>
            }
        </div>
    }

    <!-- Timeline View -->
    @if (viewMode == "timeline")
    {
        <div class="screenshots-timeline">
            @if (filteredScreenshots.Any())
            {
                @foreach (var group in GetTimelineGroups())
                {
                    <div class="timeline-group mb-4">
                        <h5 class="timeline-date">
                            <i class="fas fa-calendar-day me-2"></i>
                            @group.Key.ToString("MMMM dd, yyyy")
                        </h5>
                        <div class="timeline-items">
                            @foreach (var screenshot in group.OrderByDescending(s => s.Timestamp))
                            {
                                <div class="timeline-item d-flex mb-3" @onclick="() => ShowScreenshotModal(screenshot)">
                                    <div class="timeline-time text-muted me-3">
                                        @screenshot.Timestamp.ToString("HH:mm")
                                    </div>
                                    <img src="@screenshot.ThumbnailPath" alt="Screenshot" class="timeline-thumbnail me-3" width="100" height="75">
                                    <div class="timeline-content flex-grow-1">
                                        <div class="d-flex align-items-center">
                                            <img src="https://via.placeholder.com/24x24/@(GetEmployeeColor(screenshot.EmployeeName))/ffffff?text=@(screenshot.EmployeeName.Substring(0,1))" 
                                                 alt="@screenshot.EmployeeName" class="rounded-circle me-2" width="24" height="24">
                                            <h6 class="mb-0">@screenshot.EmployeeName</h6>
                                        </div>
                                        @if (!string.IsNullOrEmpty(screenshot.ApplicationName))
                                        {
                                            <small class="text-muted">
                                                <i class="fas fa-window-maximize me-1"></i>@screenshot.ApplicationName
                                            </small>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state text-center py-5">
                    <i class="fas fa-history fa-4x text-muted mb-3"></i>
                    <h3 class="text-muted">No timeline data</h3>
                    <p class="text-muted">Screenshots will be organized by date once available</p>
                </div>
            }
        </div>
    }
</div>

<!-- Screenshot Preview Modal -->
@if (showScreenshotModal && selectedScreenshot != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.8);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-camera me-2"></i>
                        Screenshot Details
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseScreenshotModal"></button>
                </div>
                <div class="modal-body p-0">
                    <div class="screenshot-preview">
                        <img src="@selectedScreenshot.FullImagePath" alt="Screenshot" class="img-fluid w-100">
                    </div>
                    <div class="p-3">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="d-flex align-items-center mb-2">
                                    <img src="https://via.placeholder.com/40x40/@(GetEmployeeColor(selectedScreenshot.EmployeeName))/ffffff?text=@(selectedScreenshot.EmployeeName.Substring(0,1))" 
                                         alt="@selectedScreenshot.EmployeeName" class="rounded-circle me-3" width="40" height="40">
                                    <div>
                                        <h6 class="mb-0">@selectedScreenshot.EmployeeName</h6>
                                        <small class="text-muted">@selectedScreenshot.Timestamp.ToString("MMMM dd, yyyy")</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="text-end">
                                    <small class="text-muted d-block">Captured at</small>
                                    <strong>@selectedScreenshot.Timestamp.ToString("HH:mm:ss")</strong>
                                </div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(selectedScreenshot.ApplicationName))
                        {
                            <div class="mt-3">
                                <small class="text-muted">Active Application:</small>
                                <div class="badge bg-light text-dark ms-2">
                                    <i class="fas fa-window-maximize me-1"></i>@selectedScreenshot.ApplicationName
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" @onclick="() => DownloadScreenshot(selectedScreenshot)">
                        <i class="fas fa-download me-2"></i>Download
                    </button>
                    <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteScreenshot(selectedScreenshot)">
                        <i class="fas fa-trash me-2"></i>Delete
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseScreenshotModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .search-box {
        position: relative;
    }
    .search-box i {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        z-index: 3;
    }
    
    .screenshot-card {
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .screenshot-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.2) !important;
    }
    
    .screenshot-image-container {
        position: relative;
        overflow: hidden;
    }
    .screenshot-image {
        width: 100%;
        height: 160px;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    .screenshot-card:hover .screenshot-image {
        transform: scale(1.05);
    }
    
    .screenshot-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    .screenshot-card:hover .screenshot-overlay {
        opacity: 1;
    }
    
    .screenshot-timestamp {
        position: absolute;
        top: 8px;
        right: 8px;
        background: rgba(0,0,0,0.7);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.75rem;
    }
    
    .screenshot-thumbnail {
        border-radius: 6px;
        object-fit: cover;
    }
    
    .list-item {
        cursor: pointer;
        transition: background-color 0.2s ease;
    }
    .list-item:hover {
        background-color: #f8f9fa;
    }
    
    .timeline-group {
        position: relative;
    }
    .timeline-date {
        color: #495057;
        margin-bottom: 1rem;
    }
    .timeline-item {
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
    }
    .timeline-item:hover {
        background-color: #f8f9fa;
    }
    .timeline-time {
        min-width: 60px;
        font-weight: 500;
    }
    .timeline-thumbnail {
        border-radius: 6px;
        object-fit: cover;
    }
    
    .screenshot-preview img {
        max-height: 60vh;
        object-fit: contain;
    }
    
    .empty-state {
        padding: 4rem 2rem;
    }
</style>

@code {
    private List<ScreenshotViewModel> screenshots = new();
    private List<ScreenshotViewModel> filteredScreenshots = new();
    private List<EmployeeViewModel> employees = new();
    
    private string searchTerm = "";
    private string selectedEmployee = "";
    private string selectedTimeFilter = "today";
    private string viewMode = "gallery";
    private string selectedSize = "medium";
    
    private bool autoRefresh = false;
    private Timer? refreshTimer;
    
    private bool showScreenshotModal = false;
    private ScreenshotViewModel? selectedScreenshot;
    
    private int currentPage = 1;
    private int pageSize = 12;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        FilterScreenshots();
    }

    private async Task LoadData()
    {
        await LoadEmployees();
        await LoadScreenshots();
    }

    private async Task LoadEmployees()
    {
        try
        {
            var response = await Http.GetAsync("api/employees");
            if (response.IsSuccessStatusCode)
            {
                employees = await response.Content.ReadFromJsonAsync<List<EmployeeViewModel>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
            LoadSampleEmployees();
        }
    }

    private async Task LoadScreenshots()
    {
        try
        {
            var response = await Http.GetAsync("api/screenshots");
            if (response.IsSuccessStatusCode)
            {
                screenshots = await response.Content.ReadFromJsonAsync<List<ScreenshotViewModel>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading screenshots: {ex.Message}");
            LoadSampleScreenshots();
        }
    }

    private void LoadSampleEmployees()
    {
        employees = new List<EmployeeViewModel>
        {
            new() { Name = "John Doe" },
            new() { Name = "Jane Smith" },
            new() { Name = "Mike Johnson" },
            new() { Name = "Sarah Wilson" },
            new() { Name = "David Brown" },
            new() { Name = "Lisa Chen" }
        };
    }

    private void LoadSampleScreenshots()
    {
        var now = DateTime.Now;
        var random = new Random();
        screenshots = new List<ScreenshotViewModel>();

        var employeeNames = new[] { "John Doe", "Jane Smith", "Mike Johnson", "Sarah Wilson", "David Brown", "Lisa Chen" };
        var applications = new[] { "VS Code", "Chrome", "Outlook", "Excel", "Word", "Teams", "Slack", "Firefox", "Notepad", "PowerPoint" };

        for (int i = 0; i < 50; i++)
        {
            var employee = employeeNames[random.Next(employeeNames.Length)];
            var app = applications[random.Next(applications.Length)];
            var timestamp = now.AddMinutes(-random.Next(0, 7200)); // Last 5 days
            
            screenshots.Add(new ScreenshotViewModel
            {
                Id = i + 1,
                EmployeeName = employee,
                Timestamp = timestamp,
                ThumbnailPath = $"https://via.placeholder.com/300x200/{GetRandomColor()}/ffffff?text=Screenshot+{i + 1}",
                FullImagePath = $"https://via.placeholder.com/1200x800/{GetRandomColor()}/ffffff?text=Full+Screenshot+{i + 1}",
                ApplicationName = app
            });
        }

        screenshots = screenshots.OrderByDescending(s => s.Timestamp).ToList();
    }

    private string GetRandomColor()
    {
        var colors = new[] { "4f46e5", "7c3aed", "059669", "dc2626", "ea580c", "2563eb" };
        return colors[new Random().Next(colors.Length)];
    }

    private void FilterScreenshots()
    {
        var query = screenshots.AsQueryable();

        // Search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(s => s.EmployeeName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Employee filter
        if (!string.IsNullOrEmpty(selectedEmployee))
        {
            query = query.Where(s => s.EmployeeName == selectedEmployee);
        }

        // Time filter
        var now = DateTime.Now;
        query = selectedTimeFilter switch
        {
            "today" => query.Where(s => s.Timestamp.Date == now.Date),
            "yesterday" => query.Where(s => s.Timestamp.Date == now.Date.AddDays(-1)),
            "week" => query.Where(s => s.Timestamp >= now.AddDays(-7)),
            "month" => query.Where(s => s.Timestamp >= now.AddDays(-30)),
            _ => query
        };

        filteredScreenshots = query.ToList();
        currentPage = 1; // Reset pagination
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterScreenshots();
    }

    private void OnFilterChanged()
    {
        FilterScreenshots();
    }

    private void OnViewModeChanged()
    {
        // Reset pagination when changing view
        currentPage = 1;
    }

    private void ChangeSize(string size)
    {
        selectedSize = size;
    }

    private string GetColumnClass()
    {
        return selectedSize switch
        {
            "small" => "col-xl-2 col-lg-3 col-md-4 col-sm-6",
            "medium" => "col-xl-3 col-lg-4 col-md-6",
            "large" => "col-xl-4 col-lg-6",
            _ => "col-xl-3 col-lg-4 col-md-6"
        };
    }

    private void LoadMore()
    {
        currentPage++;
    }

    private void ShowScreenshotModal(ScreenshotViewModel screenshot)
    {
        selectedScreenshot = screenshot;
        showScreenshotModal = true;
    }

    private void CloseScreenshotModal()
    {
        showScreenshotModal = false;
        selectedScreenshot = null;
    }

    private void DownloadScreenshot(ScreenshotViewModel screenshot)
    {
        // Implement download functionality
        Console.WriteLine($"Downloading screenshot: {screenshot.Id}");
    }

    private void DeleteScreenshot(ScreenshotViewModel screenshot)
    {
        // Implement delete functionality
        screenshots.Remove(screenshot);
        FilterScreenshots();
        StateHasChanged();
    }

    private async Task RefreshScreenshots()
    {
        await LoadScreenshots();
        FilterScreenshots();
        StateHasChanged();
    }

    private void ToggleAutoRefresh()
    {
        if (autoRefresh)
        {
            refreshTimer = new Timer(async _ => await RefreshScreenshots(), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
        }
        else
        {
            refreshTimer?.Dispose();
        }
    }

    private IEnumerable<IGrouping<DateTime, ScreenshotViewModel>> GetTimelineGroups()
    {
        return filteredScreenshots.GroupBy(s => s.Timestamp.Date).OrderByDescending(g => g.Key);
    }

    private string GetEmployeeColor(string employeeName)
    {
        return employeeName switch
        {
            "John Doe" => "4f46e5",
            "Jane Smith" => "7c3aed",
            "Mike Johnson" => "059669",
            "Sarah Wilson" => "dc2626",
            "David Brown" => "ea580c",
            "Lisa Chen" => "2563eb",
            _ => "6b7280"
        };
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    public class EmployeeViewModel
    {
        public string Name { get; set; } = "";
    }

    public class ScreenshotViewModel
    {
        public int Id { get; set; }
        public string EmployeeName { get; set; } = "";
        public DateTime Timestamp { get; set; }
        public string ThumbnailPath { get; set; } = "";
        public string FullImagePath { get; set; } = "";
        public string ApplicationName { get; set; } = "";
    }
} 